import { checkGrid, copyGrid, createFullGrid } from 'utils/grid'

describe('checkGrid', () => {
  it('グリッドが完全でない場合はfalseを返す', () => {
    expect(
      checkGrid([
        [0, 3, 5, 6, 7, 5, 1, 9, 5],
        [1, 5, 8, 5, 2, 3, 6, 5, 6],
        [8, 4, 6, 3, 2, 6, 7, 8, 5],
        [2, 3, 6, 7, 9, 5, 3, 3, 5],
        [9, 7, 4, 7, 5, 3, 3, 2, 6],
        [4, 5, 8, 4, 6, 3, 2, 6, 7],
        [1, 3, 5, 3, 3, 7, 9, 3, 6],
        [3, 8, 7, 5, 6, 9, 1, 3, 2],
        [8, 6, 5, 4, 3, 6, 7, 8, 9],
      ])
    ).toBeFalsy()

    expect(
      checkGrid([
        [4, 3, 5, 6, 7, 5, 1, 9, 5],
        [1, 5, 8, 5, 2, 3, 6, 5, 6],
        [8, 4, 6, 3, 2, 6, 7, 8, 5],
        [2, 3, 6, 7, 9, 5, 3, 3, 5],
        [9, 7, 4, 7, 0, 3, 3, 2, 6],
        [4, 5, 8, 4, 6, 3, 2, 6, 7],
        [1, 3, 5, 3, 3, 7, 9, 3, 6],
        [3, 8, 7, 5, 6, 9, 1, 3, 2],
        [8, 6, 5, 4, 3, 6, 7, 8, 9],
      ])
    ).toBeFalsy()

    expect(
      checkGrid([
        [0, 3, 5, 6, 7, 5, 1, 9, 5],
        [1, 5, 8, 5, 2, 3, 6, 5, 6],
        [8, 4, 6, 3, 2, 6, 7, 8, 5],
        [2, 3, 6, 7, 9, 5, 3, 3, 5],
        [9, 7, 4, 7, 9, 3, 3, 2, 6],
        [4, 5, 8, 4, 6, 3, 2, 6, 7],
        [1, 3, 5, 3, 3, 7, 9, 3, 6],
        [3, 8, 7, 5, 6, 9, 1, 3, 2],
        [8, 6, 5, 4, 3, 6, 7, 8, 0],
      ])
    ).toBeFalsy()
  })

  it('グリッドが完全である場合はtrueを返す', () => {
    expect(
      checkGrid([
        [4, 3, 5, 6, 7, 5, 1, 9, 5],
        [1, 5, 8, 5, 2, 3, 6, 5, 6],
        [8, 4, 6, 3, 2, 6, 7, 8, 5],
        [2, 3, 6, 7, 9, 5, 3, 3, 5],
        [9, 7, 4, 7, 5, 3, 3, 2, 6],
        [4, 5, 8, 4, 6, 3, 2, 6, 7],
        [1, 3, 5, 3, 3, 7, 9, 3, 6],
        [3, 8, 7, 5, 6, 9, 1, 3, 2],
        [8, 6, 5, 4, 3, 6, 7, 8, 9],
      ])
    ).toBeTruthy()
  })
})

describe('createFullGrid', () => {
  it('9x9のグリッドを返す', () => {
    const grid = createFullGrid()
    /* eslint-disable  no-restricted-syntax */
    for (const row in grid) {
      if (grid && Object.prototype.hasOwnProperty.call(grid, 'row')) {
        for (const col in grid[row]) {
          if (grid[row] && Object.prototype.hasOwnProperty.call(grid[row], 'col')) {
            expect(grid[row][col]).toBeGreaterThanOrEqual(1)
            expect(grid[row][col]).toBeLessThanOrEqual(9)
          }
        }
      }
    }
  })
})

describe('copyGrid', () => {
  it('指定されたグリッドのコピーを返す', () => {
    expect(
      copyGrid([
        [5, 3, 5, 6, 7, 5, 1, 9, 5],
        [1, 5, 8, 5, 2, 3, 6, 5, 6],
        [8, 4, 6, 3, 2, 6, 7, 8, 5],
        [2, 3, 6, 7, 9, 5, 3, 3, 5],
        [9, 7, 4, 7, 5, 3, 3, 2, 6],
        [4, 5, 8, 4, 6, 3, 2, 6, 7],
        [1, 3, 5, 3, 3, 7, 9, 3, 6],
        [3, 8, 7, 5, 6, 9, 1, 3, 2],
        [8, 6, 5, 4, 3, 6, 7, 8, 9],
      ])
    ).toStrictEqual([
      [5, 3, 5, 6, 7, 5, 1, 9, 5],
      [1, 5, 8, 5, 2, 3, 6, 5, 6],
      [8, 4, 6, 3, 2, 6, 7, 8, 5],
      [2, 3, 6, 7, 9, 5, 3, 3, 5],
      [9, 7, 4, 7, 5, 3, 3, 2, 6],
      [4, 5, 8, 4, 6, 3, 2, 6, 7],
      [1, 3, 5, 3, 3, 7, 9, 3, 6],
      [3, 8, 7, 5, 6, 9, 1, 3, 2],
      [8, 6, 5, 4, 3, 6, 7, 8, 9],
    ])
  })
})
